<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="interface-suite.xml" />
	<munit:test name="get:\flights:experience-book-my-holiday-config-test" doc:id="b04001ca-9025-48a9-a0f3-7738164aea7c" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock getFlights" doc:id="ab693900-9fb3-456b-bdf4-c26d171f6596" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="79529d36-58b4-49dd-b246-6760b9914753" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getflightsexperiencebookmyholidayconfigtest\mock_payload.dwl')]" mediaType="application/json" />
					<munit-tools:attributes value="#[readUrl('classpath://getflightsexperiencebookmyholidayconfigtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="1e123910-10d6-47bf-a42a-d8f5af6ba689" >
				<munit:payload value="#[readUrl('classpath://getflightsexperiencebookmyholidayconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getflightsexperiencebookmyholidayconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getflightsexperiencebookmyholidayconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\flights:experience-book-my-holiday-config" doc:id="7668bfdd-085b-4da0-b88c-c0e4ad81a17c" name="get:\flights:experience-book-my-holiday-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ff8c586c-ac02-4c13-95a1-15b29fe54db4" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getflightsexperiencebookmyholidayconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\flights:application\json:experience-book-my-holiday-config-test" doc:id="2c7d5d55-d4f2-4fbf-bf44-f63b5fbe3ff4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock bookFlight" doc:id="29a3ed6b-3fcf-4d35-a359-f120ad4f5406" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="c0831561-808b-4b79-bd4f-fe601d870008" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postflightsapplicationjsonexperiencebookmyholidayconfigtest\mock_payload.dwl')]" mediaType="application/json" />
					<munit-tools:attributes value="#[readUrl('classpath://postflightsapplicationjsonexperiencebookmyholidayconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postflightsapplicationjsonexperiencebookmyholidayconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="12d1ae8d-2a1c-474f-921d-a6b405f34986" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postflightsapplicationjsonexperiencebookmyholidayconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postflightsapplicationjsonexperiencebookmyholidayconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postflightsapplicationjsonexperiencebookmyholidayconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\flights:application\json:experience-book-my-holiday-config" doc:id="1e62dd81-bf54-4b1b-bd75-9ffce0a53a33" name="post:\flights:application\json:experience-book-my-holiday-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3535726c-480a-4ba1-8597-15f3f7ba2e7e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postflightsapplicationjsonexperiencebookmyholidayconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\cars:experience-book-my-holiday-config-test" doc:id="2838322d-5187-4485-a98f-55ad2e06886d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock getCars" doc:id="5bf10320-6c90-4417-8923-344a749b9d41" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="532b4490-70b8-4cc3-85a4-bf5748222162" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getcarsexperiencebookmyholidayconfigtest\mock_payload.dwl')]" mediaType="application/json" />
					<munit-tools:attributes value="#[readUrl('classpath://getcarsexperiencebookmyholidayconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getcarsexperiencebookmyholidayconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="c3c85bc4-93e0-46e9-9861-1b00530a4d9e" >
				<munit:payload value="#[readUrl('classpath://getcarsexperiencebookmyholidayconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getcarsexperiencebookmyholidayconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getcarsexperiencebookmyholidayconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\cars:experience-book-my-holiday-config" doc:id="27c24f53-efbf-40e0-881f-092fbf9194b4" name="get:\cars:experience-book-my-holiday-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="2b99809d-63bb-4ba8-b41d-d29f8e3882fa" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getcarsexperiencebookmyholidayconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\cars:application\json:experience-book-my-holiday-config-test" doc:id="2be7dc9e-713c-44ca-98a3-357145589fa2" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock bookCar" doc:id="40f93412-debc-4934-aecb-9a1350caf917" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="38ccbb50-4b9c-4c26-9a13-dfe73d83f7ef" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postcarsapplicationjsonexperiencebookmyholidayconfigtest\mock_payload.dwl')]" mediaType="application/json" />
					<munit-tools:attributes value="#[readUrl('classpath://postcarsapplicationjsonexperiencebookmyholidayconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postcarsapplicationjsonexperiencebookmyholidayconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="19894da1-a408-498c-86c4-f90fc3c3a8e6" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postcarsapplicationjsonexperiencebookmyholidayconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postcarsapplicationjsonexperiencebookmyholidayconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postcarsapplicationjsonexperiencebookmyholidayconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\cars:application\json:experience-book-my-holiday-config" doc:id="5ecfc0be-2bcf-41f1-84c8-96992e542042" name="post:\cars:application\json:experience-book-my-holiday-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b71e3c0b-5dcc-44c9-90f5-f6a8ce63c1ef" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postcarsapplicationjsonexperiencebookmyholidayconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\hotels:experience-book-my-holiday-config-test" doc:id="dfa78c4a-3a98-4b58-9954-ef818de72f7a" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock getHotels" doc:id="14050424-199e-4ac2-8d95-1b424ee52d2e" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="80fa8092-15f8-4c86-b56b-67eafef3508a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://gethotelsexperiencebookmyholidayconfigtest\mock_payload.dwl')]" mediaType="application/json" />
					<munit-tools:attributes value="#[readUrl('classpath://gethotelsexperiencebookmyholidayconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://gethotelsexperiencebookmyholidayconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5acd5441-a2f0-468d-be89-d2cc1bc94a52" >
				<munit:payload value="#[readUrl('classpath://gethotelsexperiencebookmyholidayconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://gethotelsexperiencebookmyholidayconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://gethotelsexperiencebookmyholidayconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\hotels:experience-book-my-holiday-config" doc:id="c8d1b916-19f3-4f57-aa4e-7333f69bfcb8" name="get:\hotels:experience-book-my-holiday-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="bf834005-c4f7-4462-b397-1646fab8b746" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import gethotelsexperiencebookmyholidayconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\hotels:application\json:experience-book-my-holiday-config-test" doc:id="39a0059b-d2cb-48e0-bb49-b6134259595a" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock bookHotel" doc:id="ed4e8141-90d6-4bd4-929d-501c12976997" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="20097410-5291-46e7-aa69-c8af7ff15239" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://posthotelsapplicationjsonexperiencebookmyholidayconfigtest\mock_payload.dwl')]" mediaType="application/json" />
					<munit-tools:attributes value="#[readUrl('classpath://posthotelsapplicationjsonexperiencebookmyholidayconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://posthotelsapplicationjsonexperiencebookmyholidayconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="edf642a0-2f29-4a40-9c53-5c9b55279e91" >
				<munit:payload value="#[output application/json --- readUrl('classpath://posthotelsapplicationjsonexperiencebookmyholidayconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://posthotelsapplicationjsonexperiencebookmyholidayconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://posthotelsapplicationjsonexperiencebookmyholidayconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\hotels:application\json:experience-book-my-holiday-config" doc:id="7b594dd3-0f88-45f5-940d-a5d1e48ec436" name="post:\hotels:application\json:experience-book-my-holiday-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6c83d9d1-55b5-41d1-bda1-61cad4d3788d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import posthotelsapplicationjsonexperiencebookmyholidayconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
